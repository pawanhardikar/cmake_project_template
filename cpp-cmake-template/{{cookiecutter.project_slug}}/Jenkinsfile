pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('SONAR_TOKEN')  // Jenkins secret for SonarQube
    }

    stages {
        stage('Prepare Tools') {
            steps {
                sh '''
                # Download SonarScanner CLI
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                unzip sonar-scanner-cli-*.zip

                # Download Sonar build-wrapper for C++
                wget https://binaries.sonarsource.com/Distribution/sonar-build-wrapper/sonar-build-wrapper-linux-x86.zip
                unzip sonar-build-wrapper-*.zip
                '''
            }
        }

        stage('Configure and Build (wrapped)') {
            steps {
                sh '''
                ./sonar-build-wrapper*/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output \
                    cmake -S . -B build && cmake --build build
                '''
            }
        }

        stage('Test') {
            steps {
                sh 'cd build && ctest --output-on-failure'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                sh '''
                ./sonar-scanner-*/bin/sonar-scanner \
                  -Dsonar.projectBaseDir=. \
                  -Dsonar.login=$SONAR_TOKEN
                '''
            }
        }
    }
}
